[{"C:\\Vinod\\Work\\reactcoding\\src\\index.js":"1","C:\\Vinod\\Work\\reactcoding\\src\\reportWebVitals.js":"2","C:\\Vinod\\Work\\reactcoding\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":10349,"mtime":1616195350463,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"hias9h",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Vinod\\Work\\reactcoding\\src\\index.js",[],["16","17"],"C:\\Vinod\\Work\\reactcoding\\src\\reportWebVitals.js",[],"C:\\Vinod\\Work\\reactcoding\\src\\App.js",["18","19","20","21","22","23","24","25"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport confirm, { Button, alert } from \"react-alert-confirm\";\r\nimport \"react-alert-confirm/dist/index.css\";\r\nimport './App.css';\r\nconst axios = require('axios');\r\n\r\n\r\nfunction App() {\r\n\r\n  const [currentBook, setCurrentBook] = useState(\"\")\r\n  const [currentUnits, setCurrentUnits] = useState(\"\")\r\n  const [currentPrice, setCurrentPrice] = useState(\"\")\r\n  const [checked, setChecked] = useState(false)\r\n  const [currentDiscountAmt, setDiscountAmt] = useState(\"\")\r\n  const [currentRecord, setCurrentRecord] = useState([]);\r\n  const [select, setSelect] = useState(\"Fiction\");\r\n  const [target_currency, setTargetCurrency] = useState(\"AUD\");\r\n  const [from_currency, setFromCurrency] = useState(\"USD\");\r\n  const [rate, setRate] = useState(null);\r\n  const [apiStatus, setApiStatus] = useState([]);\r\n\r\n  const from_select = useRef(),\r\n    to_select = useRef(),\r\n    from_input = useRef(),\r\n    to_input = useRef();\r\n\r\n  const initialValue = [\r\n    { id: 0, value: \" --- Select a Book ---\" }];\r\n\r\n  const [stateOptions, setStateValues] = useState(initialValue);\r\n\r\n  const fictionBooks = [\r\n    { id: 1, value: \"Friday Barnes\" },\r\n    { id: 2, value: \"Harry Potter\" },\r\n    { id: 3, value: \"Hunger Games\" },\r\n    { id: 4, value: \"Truly Tan\" }\r\n  ];\r\n\r\n  const dramaBooks = [\r\n    { id: 1, value: \"Invisible Man\" },\r\n    { id: 2, value: \"Tomorrow\" },\r\n    { id: 3, value: \"Border\" },\r\n    { id: 4, value: \"The Rainbow\" }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setStateValues(fictionBooks);\r\n  }, []);\r\n\r\n  const changeBook = (newBook) => {\r\n    setCurrentBook(newBook);\r\n  }\r\n\r\n  const changeUnits = (newunits) => {\r\n    setCurrentUnits(newunits);\r\n  }\r\n\r\n  const changePrice = (newprice) => {\r\n    setCurrentPrice(newprice);\r\n  }\r\n\r\n  const discountAmt = (discount) => {\r\n    setDiscountAmt(discount);\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await axios.get('https://api.exchangeratesapi.io/latest');\r\n        console.log(data);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n\r\n  const resetAll = () => {\r\n    setCurrentRecord([]);\r\n    setCurrentBook(\"\");\r\n    setCurrentUnits(\"\");\r\n    setCurrentPrice(\"\");\r\n  };\r\n\r\n  const handleChange = event => {\r\n    const value = event.target.value;\r\n    setSelect(value);\r\n    if (value === \"Fiction\") {\r\n      setStateValues(fictionBooks);\r\n    } else {\r\n      setStateValues(dramaBooks);\r\n    }\r\n  };\r\n\r\n  const calculateTotal = () => {\r\n    var cal_total = currentUnits * currentPrice;\r\n    var discountPercentage = currentDiscountAmt / 100;\r\n    var discountedAmout = cal_total * discountPercentage;\r\n    var finalAmountAfterDisount = cal_total - discountedAmout;\r\n    const recentNewRecord = {\r\n      book: currentBook,\r\n      units: currentUnits,\r\n      price: currentPrice,\r\n      amount: cal_total,\r\n      discount: discountedAmout.toFixed(2),\r\n      finalamount: finalAmountAfterDisount.toFixed(2)\r\n    };\r\n\r\n    const newRecord = [...currentRecord, recentNewRecord];\r\n    setCurrentRecord(newRecord);\r\n    setCurrentBook(\"\");\r\n    setCurrentUnits(\"\");\r\n    setCurrentPrice(\"\");\r\n    setDiscountAmt(\"\");\r\n  };\r\n\r\n\r\n  const selectTargetCurrency = () => {\r\n    const from_cur = from_select.current.value;\r\n    const to_cur = to_select.current.value;\r\n    axios\r\n      .get(\"https://api.exchangeratesapi.io/latest?base=\" + from_cur)\r\n      .then((result) => {\r\n        const rate = result.data.rates[to_cur];\r\n        setTargetCurrency(rate);\r\n      });\r\n  }\r\n\r\n  const convertRate = () => {\r\n    const from_cur = from_select.current.value;\r\n    const to_cur = to_select.current.value;\r\n    const from_amount = from_input.current.value;\r\n    console.log(from_cur);\r\n    axios\r\n      .get(\"https://api.exchangeratesapi.io/latest?base=\" + from_cur)\r\n      .then((result) => {\r\n        const rate = result.data.rates[to_cur];\r\n        const converted_amount = rate * from_amount;\r\n        to_input.current.value = converted_amount.toFixed(2);\r\n      });\r\n  };\r\n\r\n  const setCurRate = () => {\r\n    const from_cur = from_select.current.value;\r\n    const to_cur = to_select.current.value;\r\n    axios\r\n      .get(\"https://api.exchangeratesapi.io/latest?base=\" + from_cur)\r\n      .then((result) => {\r\n        const rate = result.data.rates[to_cur];\r\n        setRate(rate);\r\n      });\r\n  };\r\n\r\n  const removeRecord = (indexToRemove) => {\r\n    const newList = currentRecord.filter((item, index) => index !== indexToRemove);\r\n    setCurrentRecord(newList);\r\n  }\r\n\r\n  function handleClickBasic(indexToRemove) {\r\n    confirm({\r\n      title: \"Confirm Delete\",\r\n      language: \"en\",\r\n      content: <h2>Delete Record</h2>,\r\n      onOk: () => removeRecord(indexToRemove)\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <h1>Book shopping</h1>\r\n      </div>\r\n      <div className=\"flexbox-container\">\r\n        <div className=\"column_1\">\r\n          <h2>Purchase section</h2>\r\n          <div className=\"maintransaction\">\r\n            <div className=\"bookstype\">\r\n              <span className=\"category\">\r\n                <label>Fiction</label>\r\n                <input\r\n                  name=\"category\"\r\n                  value=\"Fiction\"\r\n                  type=\"radio\"\r\n                  onChange={handleChange}\r\n                  checked={select === \"Fiction\"}\r\n                />\r\n                <label>Drama</label>\r\n                <input\r\n                  name=\"category\"\r\n                  value=\"Drama\"\r\n                  type=\"radio\"\r\n                  onChange={handleChange}\r\n                  checked={select === \"Drama\"}\r\n                />\r\n              </span>\r\n            </div>\r\n            <div className=\"container\">\r\n              <label>Select Book</label>\r\n              <select className=\"bookoptions\" defaultValue={'DEFAULT'} onChange={(event) => changeBook(event.target.value)}>\r\n                <option value=\"DEFAULT\" disabled>Choose a book ...</option>\r\n                {\r\n                  stateOptions.map((localState, index) => (\r\n                    <option key={localState.id}>{localState.value}</option>\r\n                  ))\r\n                }\r\n              </select>\r\n            </div><br></br>\r\n            <div className=\"quantity\">\r\n              <span className=\"units\">\r\n                <label>Units</label>\r\n                <input name=\"units\" type=\"text\" onChange={(event) => changeUnits(event.target.value)}></input>\r\n              </span>\r\n              <span className=\"price\">\r\n                <label>Price $</label>\r\n                <input name=\"price\" type=\"text\" onChange={(event) => changePrice(event.target.value)}></input>\r\n              </span>\r\n              <span className=\"discount\">\r\n                <label>Discount %</label>\r\n                <input name=\"discount\" type=\"checkbox\" onChange={(event) => setChecked(!checked)} checked={checked} />\r\n                {\r\n                  checked ? (\r\n                    <input className=\"discountvalue\" name=\"discountvalue\" type=\"text\" onChange={(event) => discountAmt(event.target.value)} placeholder=\"discount\" />\r\n                  ) : (<div></div>)\r\n                }\r\n              </span>\r\n            </div>\r\n            <div className=\"recordBtn\">\r\n              <button name=\"record\" onClick={(event) => calculateTotal()}>Record</button>\r\n              <button name=\"reset\" onClick={resetAll}>Reset</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"column_2\">\r\n          <div className=\"purchasedbooks\">\r\n            <h2>Transaction record</h2>\r\n            <table className=\"purchasetable result\">\r\n              <th>Item no</th>\r\n              <th>Books</th>\r\n              <th>Units</th>\r\n              <th>Price</th>\r\n              <th>Amount (AUD)</th>\r\n              <th>Discount Amount (AUD)</th>\r\n              <th>Final Amount (AUD)</th>\r\n              {\r\n                currentRecord.map(({ book, units, price, amount, discount, finalamount }, index) => (\r\n                  <tr>\r\n                    <td>{index + 1}</td>\r\n                    <td>{book}</td>\r\n                    <td>{units}</td>\r\n                    <td>$ {price}</td>\r\n                    <td>$ {amount}</td>\r\n                    <td>$ {discount}</td>\r\n                    <td>$ {finalamount}</td>\r\n                    <span onClick={() => handleClickBasic(index)} className=\"removeRecord\">\r\n                      -\r\n                    </span>\r\n                  </tr>\r\n                ))\r\n              }\r\n\r\n            </table>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"globalCurrencyConverter\">\r\n        <h2>Currency Converter</h2>\r\n        <div className=\"container box\">\r\n          <label>\r\n            <input\r\n              ref={from_input}\r\n              name=\"sourceCurrency\"\r\n              type=\"text\"\r\n              placeholder=\"fromCurrency\"\r\n            />\r\n            <select\r\n              ref={from_select}\r\n              className=\"fromCurrency\"\r\n              defaultValue={\"USD\"}\r\n              onChange={setCurRate}\r\n            >\r\n              <option value=\"USD\">USD</option>\r\n              <option value=\"AUD\">AUD</option>\r\n              <option value=\"NZD\">NZD</option>\r\n            </select>\r\n          </label>\r\n          {\" --> \"}\r\n          <label>\r\n            <input\r\n              ref={to_input}\r\n              name=\"targetCurrency\"\r\n              type=\"text\"\r\n              placeholder=\"toCurrency\"\r\n            />\r\n            <select ref={to_select} className=\"toCurrency\" defaultValue=\"AUD\" onChange={setCurRate}>\r\n              <option value=\"USD\">USD</option>\r\n              <option value=\"AUD\">AUD</option>\r\n              <option value=\"NZD\">NZD</option>\r\n              <option value=\"EUR\">EUR</option>\r\n              <option value=\"INR\">INR</option>\r\n              <option value=\"AED\">AED</option>\r\n            </select>\r\n          </label>\r\n          <div className=\"recordBtn\">\r\n            {rate ? (\r\n              <div>\r\n                Rate: One {from_currency} is {rate}\r\n              </div>\r\n            ) : null}\r\n            <button name=\"convert\" onClick={convertRate}>\r\n              Convert\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":2,"column":19,"nodeType":"32","messageId":"33","endLine":2,"endColumn":25},{"ruleId":"30","severity":1,"message":"34","line":2,"column":27,"nodeType":"32","messageId":"33","endLine":2,"endColumn":32},{"ruleId":"30","severity":1,"message":"35","line":17,"column":10,"nodeType":"32","messageId":"33","endLine":17,"endColumn":25},{"ruleId":"30","severity":1,"message":"36","line":18,"column":25,"nodeType":"32","messageId":"33","endLine":18,"endColumn":40},{"ruleId":"30","severity":1,"message":"37","line":20,"column":10,"nodeType":"32","messageId":"33","endLine":20,"endColumn":19},{"ruleId":"30","severity":1,"message":"38","line":20,"column":21,"nodeType":"32","messageId":"33","endLine":20,"endColumn":33},{"ruleId":"39","severity":1,"message":"40","line":48,"column":6,"nodeType":"41","endLine":48,"endColumn":8,"suggestions":"42"},{"ruleId":"30","severity":1,"message":"43","line":121,"column":9,"nodeType":"32","messageId":"33","endLine":121,"endColumn":29},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'alert' is defined but never used.","'target_currency' is assigned a value but never used.","'setFromCurrency' is assigned a value but never used.","'apiStatus' is assigned a value but never used.","'setApiStatus' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fictionBooks'. Either include it or remove the dependency array.","ArrayExpression",["46"],"'selectTargetCurrency' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},"Update the dependencies array to be: [fictionBooks]",{"range":"49","text":"50"},[1543,1545],"[fictionBooks]"]