{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["axios","require","App","useState","currentBook","setCurrentBook","currentUnits","setCurrentUnits","currentPrice","setCurrentPrice","checked","setChecked","currentDiscountAmt","setDiscountAmt","currentRecord","setCurrentRecord","select","setSelect","useForm","register","handleSubmit","errors","useRef","id","value","stateOptions","setStateValues","fictionBooks","dramaBooks","useEffect","a","get","data","console","log","fetchData","handleChange","event","target","handleClickBasic","indexToRemove","confirmAlert","customUI","onClose","className","onClick","newList","filter","item","index","removeRecord","onSubmit","alert","JSON","stringify","cal_total","discountedAmout","finalAmountAfterDisount","recentNewRecord","book","units","price","amount","discount","toFixed","finalamount","newRecord","name","type","onChange","defaultValue","newBook","disabled","map","localState","htmlFor","newunits","placeholder","ref","required","validate","newprice","pattern","message","discountvalue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d37b732.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css\r\nimport { useForm } from \"react-hook-form\";\r\nimport './App.css';\r\nconst axios = require('axios');\r\n\r\n\r\nfunction App() {\r\n\r\n  const [currentBook, setCurrentBook] = useState(\"\")\r\n  const [currentUnits, setCurrentUnits] = useState(\"\")\r\n  const [currentPrice, setCurrentPrice] = useState(\"\")\r\n  const [checked, setChecked] = useState(false)\r\n  const [currentDiscountAmt, setDiscountAmt] = useState(\"\")\r\n  const [currentRecord, setCurrentRecord] = useState([]);\r\n  const [select, setSelect] = useState(\"Fiction\");\r\n  const [target_currency, setTargetCurrency] = useState(\"AUD\");\r\n  const [from_currency, setFromCurrency] = useState(\"USD\");\r\n  const [rate, setRate] = useState(null);\r\n  const [apiStatus, setApiStatus] = useState([]);\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n\r\n  const from_select = useRef(),\r\n    to_select = useRef(),\r\n    from_input = useRef(),\r\n    to_input = useRef();\r\n\r\n  const initialValue = [\r\n    { id: 0, value: \" --- Select a Book ---\" }];\r\n\r\n  const [stateOptions, setStateValues] = useState(initialValue);\r\n\r\n  const fictionBooks = [\r\n    { id: 1, value: \"Friday Barnes\" },\r\n    { id: 2, value: \"Harry Potter\" },\r\n    { id: 3, value: \"Hunger Games\" },\r\n    { id: 4, value: \"Truly Tan\" }\r\n  ];\r\n\r\n  const dramaBooks = [\r\n    { id: 1, value: \"Invisible Man\" },\r\n    { id: 2, value: \"Tomorrow\" },\r\n    { id: 3, value: \"Border\" },\r\n    { id: 4, value: \"The Rainbow\" }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setStateValues(fictionBooks);\r\n  }, []);\r\n\r\n  const changeBook = (newBook) => {\r\n    setCurrentBook(newBook);\r\n  }\r\n\r\n  const changeUnits = (newunits) => {\r\n    setCurrentUnits(newunits);\r\n  }\r\n\r\n  const changePrice = (newprice) => {\r\n    setCurrentPrice(newprice);\r\n  }\r\n\r\n  const discountAmt = (discount) => {\r\n    setDiscountAmt(discount);\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await axios.get('https://api.exchangeratesapi.io/latest');\r\n        console.log(data);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n\r\n  const resetAll = () => {\r\n    setCurrentRecord([]);\r\n    setCurrentBook(\"\");\r\n    setCurrentUnits(\"\");\r\n    setCurrentPrice(\"\");\r\n  };\r\n\r\n  const handleChange = event => {\r\n    const value = event.target.value;\r\n    setSelect(value);\r\n    if (value === \"Fiction\") {\r\n      setStateValues(fictionBooks);\r\n    } else {\r\n      setStateValues(dramaBooks);\r\n    }\r\n  };\r\n\r\n  const calculateTotal = data => {\r\n    alert(JSON.stringify(data));\r\n    var cal_total = currentUnits * currentPrice;\r\n    var discountPercentage = currentDiscountAmt / 100;\r\n    var discountedAmout = cal_total * discountPercentage;\r\n    var finalAmountAfterDisount = cal_total - discountedAmout;\r\n    \r\n    const recentNewRecord = {\r\n      book: currentBook,\r\n      units: currentUnits,\r\n      price: currentPrice,\r\n      amount: cal_total,\r\n      discount: discountedAmout.toFixed(2),\r\n      finalamount: finalAmountAfterDisount.toFixed(2)\r\n    };\r\n\r\n    const newRecord = [...currentRecord, recentNewRecord];\r\n    setCurrentRecord(newRecord);\r\n    setCurrentBook(\"\");\r\n    setCurrentUnits(\"\");\r\n    setCurrentPrice(\"\");\r\n    setDiscountAmt(\"\");\r\n  };\r\n\r\n\r\n  const selectTargetCurrency = () => {\r\n    const from_cur = from_select.current.value;\r\n    const to_cur = to_select.current.value;\r\n    axios\r\n      .get(\"https://api.exchangeratesapi.io/latest?base=\" + from_cur)\r\n      .then((result) => {\r\n        const rate = result.data.rates[to_cur];\r\n        setTargetCurrency(rate);\r\n      });\r\n  }\r\n\r\n  const convertRate = () => {\r\n    const from_cur = from_select.current.value;\r\n    const to_cur = to_select.current.value;\r\n    const from_amount = from_input.current.value;\r\n    console.log(from_cur);\r\n    axios\r\n      .get(\"https://api.exchangeratesapi.io/latest?base=\" + from_cur)\r\n      .then((result) => {\r\n        const rate = result.data.rates[to_cur];\r\n        const converted_amount = rate * from_amount;\r\n        to_input.current.value = converted_amount.toFixed(2);\r\n      });\r\n  };\r\n\r\n  const setCurRate = () => {\r\n    const from_cur = from_select.current.value;\r\n    const to_cur = to_select.current.value;\r\n    axios\r\n      .get(\"https://api.exchangeratesapi.io/latest?base=\" + from_cur)\r\n      .then((result) => {\r\n        const rate = result.data.rates[to_cur];\r\n        setRate(rate);\r\n      });\r\n  };\r\n\r\n  const removeRecord = (indexToRemove) => {\r\n    const newList = currentRecord.filter((item, index) => index !== indexToRemove);\r\n    setCurrentRecord(newList);\r\n  }\r\n\r\n  function handleClickBasic(indexToRemove) {\r\n    confirmAlert({\r\n      customUI: ({ onClose }) => {\r\n        return (\r\n          <div id=\"deletedialog\" className='custom-ui'>\r\n            <h1>Are you sure?</h1>\r\n            <p>You want to delete this record ?</p>\r\n            <button onClick={onClose}>No</button>\r\n            <button\r\n              onClick={() => {\r\n                removeRecord(indexToRemove)\r\n                onClose();\r\n              }}\r\n            >\r\n              Yes, Delete it!\r\n            </button>\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  const onSubmit = data => {\r\n    alert(JSON.stringify(data));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"datacolumn1\">\r\n        <div>\r\n          <h1>Order Books</h1>\r\n        </div>\r\n        <form onSubmit={handleSubmit(calculateTotal)}>\r\n          <h3>Choose a Category:</h3>\r\n          <div className=\"bookstype\">\r\n            <div id=\"radioselect1\">\r\n              <label>Fiction</label>\r\n              <input\r\n                name=\"category\"\r\n                value=\"Fiction\"\r\n                type=\"radio\"\r\n                onChange={handleChange}\r\n                checked={select === \"Fiction\"}\r\n              />\r\n            </div>\r\n            <div id=\"radioselect2\">\r\n              <label>Drama</label>\r\n              <input\r\n                name=\"category\"\r\n                value=\"Drama\"\r\n                type=\"radio\"\r\n                onChange={handleChange}\r\n                checked={select === \"Drama\"}\r\n              />\r\n            </div>\r\n          </div><br></br><br></br>\r\n          <div className=\"selectabook\">\r\n            <label>Select Book</label>\r\n            <select className=\"bookoptions\" defaultValue={'DEFAULT'} onChange={(event) => changeBook(event.target.value)}>\r\n              <option value=\"DEFAULT\" disabled>Choose a book ...</option>\r\n              {\r\n                stateOptions.map((localState, index) => (\r\n                  <option value={localState.value} key={localState.id}>{localState.value}</option>\r\n                ))\r\n              }\r\n            </select>\r\n          </div>\r\n          <br></br>\r\n          <div>\r\n            <label htmlFor=\"units\">Units</label>\r\n            <input\r\n              name=\"units\"\r\n              onChange={(event) => changeUnits(event.target.value)}\r\n              placeholder=\"0\"\r\n              ref={register({\r\n                required:\"Required\",\r\n                validate: value => value > 0\r\n              })}\r\n            />\r\n          </div>\r\n          {errors.units && <p>Input is not valid</p>}\r\n          <div>\r\n            <label htmlFor=\"price\">Price</label>\r\n            <input\r\n              name=\"price\"\r\n              placeholder=\"0\"\r\n              onChange={(event) => changePrice(event.target.value)}\r\n              ref={register({\r\n                required: \"Price is required\",\r\n                pattern: {\r\n                  value: /^[0-9\\b]+$/,\r\n                  message: \"Invalid price\"\r\n                }\r\n              })}\r\n            />\r\n          </div>\r\n          {errors.price && <p>{errors.price.message}</p>}\r\n          <div>\r\n            <span className=\"discount\">\r\n              <label>Discount %</label>\r\n              <input name=\"discount\" type=\"checkbox\" onChange={(event) => setChecked(!checked)} checked={checked} />\r\n              {\r\n                checked ? (\r\n                  <input className=\"discountvalue\"\r\n                    name=\"discountvalue\"\r\n                    type=\"text\"\r\n                    onChange={(event) => discountAmt(event.target.value)} placeholder=\"discount\"\r\n                    ref={register({\r\n                      required: \"Discount is required\",\r\n                      pattern: {\r\n                        value: /^[0-9\\b]+$/,\r\n                        message: \"Invalid discount amount !\"\r\n                      }\r\n                    })}\r\n                  />\r\n                ) : (<div></div>)\r\n              }\r\n            </span>\r\n            {errors.discountvalue && <p>{errors.discountvalue.message}</p>}\r\n          </div>\r\n          <input type=\"submit\"/>\r\n        </form>\r\n\r\n      </div>\r\n      <div className=\"datacolumn2\">\r\n        <div>\r\n          <h1>Order details</h1>\r\n        </div>\r\n        <div className=\"column_result\">\r\n          <div className=\"purchasedbooks\">\r\n            <h3>Transaction record</h3>\r\n            <table id=\"transactionsection\" className=\"purchasetable result\">\r\n              <th>Item no</th>\r\n              <th>Books</th>\r\n              <th>Units</th>\r\n              <th>Price</th>\r\n              <th>Amount (AUD)</th>\r\n              <th>Discount Amount (AUD)</th>\r\n              <th>Final Amount (AUD)</th>\r\n              <th></th>\r\n\r\n              {\r\n                currentRecord.map(({ book, units, price, amount, discount, finalamount }, index) => (\r\n                  <tr>\r\n                    <td>{index + 1}</td>\r\n                    <td>{book}</td>\r\n                    <td>{units}</td>\r\n                    <td>$ {price}</td>\r\n                    <td>$ {amount}</td>\r\n                    <td>$ {discount}</td>\r\n                    <td>$ {finalamount}</td>\r\n                    <td>\r\n                      <span onClick={() => handleClickBasic(index)} className=\"removeRecord\">\r\n                        -\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              }\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/*\r\n      <div className=\"globalCurrencyConverter\">\r\n        <h2>Currency Converter</h2>\r\n        <div className=\"container box\">\r\n          <label>\r\n            <input\r\n              ref={from_input}\r\n              name=\"sourceCurrency\"\r\n              type=\"text\"\r\n              placeholder=\"fromCurrency\"\r\n            />\r\n            <select\r\n              ref={from_select}\r\n              className=\"fromCurrency\"\r\n              defaultValue={\"USD\"}\r\n              onChange={setCurRate}\r\n            >\r\n              <option value=\"USD\">USD</option>\r\n              <option value=\"AUD\">AUD</option>\r\n              <option value=\"NZD\">NZD</option>\r\n            </select>\r\n          </label>\r\n          {\" --> \"}\r\n          <label>\r\n            <input\r\n              ref={to_input}\r\n              name=\"targetCurrency\"\r\n              type=\"text\"\r\n              placeholder=\"toCurrency\"\r\n            />\r\n            <select ref={to_select} className=\"toCurrency\" defaultValue=\"AUD\" onChange={setCurRate}>\r\n              <option value=\"USD\">USD</option>\r\n              <option value=\"AUD\">AUD</option>\r\n              <option value=\"NZD\">NZD</option>\r\n              <option value=\"EUR\">EUR</option>\r\n              <option value=\"INR\">INR</option>\r\n              <option value=\"AED\">AED</option>\r\n            </select>\r\n          </label>\r\n          <div className=\"recordBtn\">\r\n            {rate ? (\r\n              <div>\r\n                Rate: One {from_currency} is {rate}\r\n              </div>\r\n            ) : null}\r\n            <button name=\"convert\" onClick={convertRate}>\r\n              Convert\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div> \r\n      */}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}